server:
  port: 8099

spring:
  datasource:
        name: mysql_test
        type: com.alibaba.druid.pool.DruidDataSource
        #druid相关配置
        druid:
          #监控统计拦截的filters
          filters: stat
          driver-class-name: com.mysql.jdbc.Driver
          #基本属性
          # 主库数据源
          #master:
          url: jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=UTF-8&allowMultiQueries=true
          username: root
          password: root
          # 从库数据源
          #slave:
              # 从数据源开关/默认关闭
              #enabled: false
              #url:
              #sername:
              #password:
          min-idle: 1
          max-active: 20
          #获取连接等待超时时间
          max-wait: 60000
          #间隔多久进行一次检测，检测需要关闭的空闲连接
          time-between-eviction-runs-millis: 60000
          #一个连接在池中最小生存的时间
          min-evictable-idle-time-millis: 300000
          validation-query: SELECT 'x'
          test-while-idle: true
          test-on-borrow: false
          test-on-return: false
          #打开PSCache，并指定每个连接上PSCache的大小。oracle设为true，mysql设为false。分库分表较多推荐设置为false
          pool-prepared-statements: false
          max-pool-prepared-statement-per-connection-size: 20
          connection-init-sqls: set names utf8mb4
          initial-size: 1

  # 展示SQL语句
  jpa:
    show-sql: true

  # Spring Boot Redis
  redis:
    # Redis服务器地址
    host: 192.168.9.170
#    host: 127.0.0.1
    # Redis服务器连接端口
    port: 19000
    # Redis服务器连接密码（默认为空）
    password:
    # Redis数据库索引（默认为0）
    database: 0
    # 连接超时时间（毫秒），2.0 中该参数的类型为Duration，这里在配置的时候需要指明单位
    timeout: 10s
    # 连接池配置，2.0中直接使用jedis或者lettuce配置连接池
    jedis:
      pool:
        # 连接池最大连接数（使用负值表示没有限制）
        max-active: 8
        # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: -1s
        # 连接池中的最大空闲连接
        max-idle: 8
        # 连接池中的最小空闲连接
        min-idle: 0

  # rabbitmq
  rabbitmq:
    host: 192.168.69.228
    port: 5672
    username: admin
    password: admin

mybatis:
  mapper-locations: classpath:mapper/*/*.xml
  type-aliases-package: com.pd.manage.model.system

#pagehelper
pagehelper:
    helperDialect: mysql
    reasonable: true
    supportMethodsArguments: true
    params: count=countSql
    returnPageInfo: check

# dubbo配置
dubbo:
  # 配置dubbo的包扫描，针对dubbo的@Service, @Reference注解
  scan:
    basePackages: com.pd.manage.service.demo.impl

  application:
    id: springboot-manage
    name: springboot-manage
    logger: slf4j

  # 注册中心配置
  registry:
    id: my-registry
    address: zookeeper1.ablejava.com:2181,zookeeper2.ablejava.com:2181 # dubbo注册地址
    default: true
    protocol: zookeeper
    client: zkclient

  # 协议配置
  protocol:
    id: dubbo
    name: dubbo
    port: 20897 # 端口
    threadpool: fixed # 线程池类型
    threads: 200 # 线程池大小

  # 提供方配置
  provider:
    filter: dubboServiceLogFilter
    timeout: 5000
    retries: 0
    delay: -1
    actives: 150
    executes:  150

  consumer:
    check: false
    timeout: 5000
    retries: 0
    loadbalance: leastactive

# 服务的版本信息
demo:
  service:
    version: 1.0.0


# Enables Dubbo All Endpoints
management:
  server:
      port: 8083
  endpoint:
    dubbo:
      enabled: true
      dubbo-shutdown.enabled: true
      dubbo-configs.enabled: true
      dubbo-services.enabled: true
      dubbo-references.enabled: true
      dubbo-properties.enabled: true
  # Dubbo Health
  health:
    dubbo:
      status:
        ## StatusChecker Name defaults (default : "memory", "load" )
        defaults: memory
        ## StatusChecker Name extras (default : empty )
        extras: load,ThreadPool

# Dubbo Endpoint (default status is disable)
  endpoints:
    web:
      exposure:
        include: "*"

